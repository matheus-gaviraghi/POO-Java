Exercicio 4.4:
- O construtor de uma classe deve ser público para ter acesso à própria classe
- para a classe Data ser visível externamente, deveria colocar o public class


Exercicio 4.5:
- Linha 6: o construtor deveria ser chamado com um this

class Ponto2D {
    private double x,y;
    Ponto2D() {
    // Ponto2D(0.0,0.0); ERRADO
    this(0.0,0.0); // CORRETO
    }

    Ponto2D(double coord1,double coord2){
        x = coord1; y = coord2;
    }
} // fim da classe


Exercicio 4.6:
int soma (int x, int y) vs float soma (int x, int y) 
- Isso aqui não funciona, pois não é possível diferenciar os metodos
- Se for assim funciona: int soma (int x, int y) vs float soma (float x, int y)

Por ter os mesmos parametros, esse codigo do exercicio nao é compilado


Exercicio 4.7:
- Linha 7:  tenho que colocar o this(0,0) ao invés de DemoConstrutor(0,0) 
- A chamada do construtor deve ser a primeira ação a ser desempenhada, então a 
linha 7 deveria vir antes do que a linha 6 


Exercicio 4.8:
- 2 metodos com mesma assinatura (mesmos parametros)
- Por definicao construtor nao retorna nada, só executa as operações,
entao os returns estao errados


Exercicio 4.18:
1 metodo A
2 metodo A
3 metodo A
4 metodo A
5 metodo B
6 metodo B
7 metodo C
8 metodo A
9 metodo A
10 metodo C


========== CAMPOS E MÉTODOS ESTÁTICOS =========
- Tenho 1 metodo que quero compartilhar pra toda classe, e não individual para cada objeto
- Vale para todos os objetos
- Ex: so tenho 1 main

- Mesma ideia de uma variavel global em C: quero que todos possam acessar
- o static é o que permite o compartilhamento de informações entre os objetos
- Todos vao enxergar o mesmo numero sempre (Ex: SimuladorCaixaDeBanco2)
- Coloco static entre o modificador de acesso e o tipo da variavel

Constantes de classe: 
    static: unico, todos tem acesso, modificavel
    final: constante, nao modificavel

- Exemplo DemoConstantesMatematicas: 
    Linha 13 (a que tenho apenas a classe sendo chamada, sem um objeto em si -> c1.raizDe5 == ConstantesMatematicas.raizDe5): por ser unico, posso usar a classe dentro de outro codigo sem precisar instanciar a classe

Métodos Estáticos:
- quero ter um metodo unico para todos os meus objetos
- todos os atributos internos desse metodo devem ser estaticos
- Exemplo CalculoDePrecoDeTerreno: double preco é estatico e unico
- tudo que for criado dentro de um contexto estatico se torna estatico
- se quiser chamar um metodo que nao é estatico dentro de uma mesma classe onde o metodo que requer é estatico, nao funciona. Ex: se eu tirar o static do metodo precoDoTerreno, na main vai dar problema
- agora se eu tiver uma outra classe que realize este calculo, e lá nao foi definido como estatico, mas eu chamo na main essa classe, automaticamente o metodo e atributos vao se tornar estaticos, e vai funcionar direitinho

SOMENTE MÉTODOS E ATRIBUTOS PODEMOS DECLARAR COMO ESTÁTICOS
- O construtor não pode ser estatico, visto que este é executado ao chamar a classe
- O construtor não faz sentido quando tenho todos atributos e metodos estaticos, uma vez que não preciso instaciar um novo objeto.

- O que muda um metodo (assinatura) é o seu nome e seus parametros (tipo e quantidade), não o tipo do return (Exercicio 5.12)


AULA 07/10
Construtores - NAO RETORNAM, o proprio sistema constroi o retorno, a gente nao deve tentar
especificar um retorno

Dentro de um mesmo escopo, se tiver 2 variaveis com mesmo nome, tenho que usar o this para referenciar ao atributo do objeto.
    Data(int mes, int dia, int ano){
        this.mes = mes;
        this.dia = dia;
        this.ano = ano;
    }

Reutilização de Código:
- Add informação em classes ja existentes (atributos e métodos) para reutilizar essas classes.
- 2 formas de reutilização: delegação (ou composição) e herança.
    Delegação: utilizo objetos com base em classes que ja foram criadas (crio objetos) - o que estavamos fazendo até agora
        - Na delegação, inicializo no construtor os objetos que sao reutilizados
        - Os modificadores de acesso são mantidos (as regras de acesso são mantidas)
        Slide ?OU?: nao conseguimos modificar o valor de k em nenhuma das opções, pois x1 é privado, teria de ser *publico* ou protegido
        OBS: o protegido funciona como se fosse publico dentro de um mesmo diretorio, mas nao deixa que outros diretorios acessem
    
    Herança: herdar informações e add novas informações as classes
        - palavra-chave: extends
        Ex: class PacienteDeClinica extends Pessoa{...} -> PacienteDeClinica tem as caracteristicas de Pessoa
        - se tiver private no pai, não adianta tentar acessar no filho, não consegue! Tem que ser protegido.
        - SÓ 1 PAI, para ter mais temos que usar Interface (herança multipla)
        - Ocultação: redeclaração de um campo/atributo do pai no filho
        - super: aponta pro objeto pai
        - this: aponta pro proprio objeto
        SEMPRE: primeiro cria objeto pai e depois trabalha com atributos
        - super. : especifico o atributo ou metodo do pai que quero trabalhar
        - super.super: NÃO DÁ




### DUVIDAS
 - Exemplo RegistroAcademicoDeGraduacao:
    -> o que você quer dizer por serem referenciados?
    -> nao seria somente pelo fato de que aluno1 ja tem um local de memoria e estamos apenas sobreescrevendo ele?

    // Palavra-chave final indica que esse metodo nao pode ser sobreposto por outros metodos de mesma
	// assinatura em classes filhas (herdeiras)
	public final float qualSalario() {
		return salario;
	}
    // como assim nao pode ser sobreposto?
    Não podemos sobrepor um metodo final da classe pai em um classe filha, o que pode ser feito é implementar um novo método com assinatura distinta e chamar o metodo da outra usando o super
    Ex: Automovel tem o metodo quantoCusta(), aí la no AutomovelBasico tenho um quantoCusta novamente como final. Se tivesse la no Automovel o metodo como sendo final, no AutomovelBasico poderia criar um metodo quantoCusta(int x){super.quantoCusta(...) e usar x aqui dentro}


    // por que em alguns códigos é pedido para inserir o package e outros nao precisa? Ex: ModificadoresAcesso x ChefeDeDepartamento

    // Métodos herdados não podem acessar campos declarados em subclasses.  
    // Seria porque igual eles nao teriam utilidade? uma vez que na declaração do metodo na classe super esses atributos nem existem?

    // Métodos do tipo final podem ser herdados, mas não podem ser sobrepostos -> somente atributos, certo?

# ANOTAÇÕES AULA 14/10
- final Class:  nao preciso declarar os metodos todos como final, eles se tornam "final" porque igual nao posso extender a classe
- polimorfismo: os objetos filhos, desde que tendo o mesmo pai, podem se "passar" como o pai, ou seja, apresentam as mesmas caracteristicas
    Ex: lista de pessoas, dentro dessa lista posso ter o funcionario q é uma pessoa, assim como tenho 2 tipos de automoveis que podem ser configuradas como "Automovel"
 
- Interface de automovel: (tudo que é visivel)
    - atributos são visiveis (movido...)
    - modelo, cor
    - metodos: quantoCusta, quantasPrestacoes, testeAutomovel, toString

    quem tiver uma referencia de automovel vai conseguir acessar esses atributos e executar esses metodos

- Classes Abstratas e Interfaces
    - metodo do tipo abstrato: quem é filho por obrigação tem que reimplementar o metodo em particular
    - interface em java só tem metodos, nao tem atributos. Ex de uso: interface grafica (click do mouse)
    - posso ter classe abstrata sem metodos abstratos, mas tendo metodos abstratos transformo a classe como abstrata
    - nao consigo executar um metodo abstrato: ela precisa ser reimplementada por seus filhos
    - metodo abstrato nao precisa de corpo, porque ele precisa ser implementado por seus filhos
    - classe abstrata: tenho um ou mais metodos abstratos
    
    - interface: MÉTODOS não implementados que desejamos que sejam implementados
    - só temos definição, nao implementação, só metodos, nao tenho atributo
    - "implements" é a palavra chave para o uso de Interfaces
    - posso ter varias implementações de interfaces ao mesmo tempo, mas apenas 1 extensao para 1 classe
    ex: class Circulo extends Shape implements interfaceA, interfaceB, interfaceC{}
    todos os metodos abstratos devem ser implementados dentro desta classe, se nao implementar o interfaceA nao funciona, por Exemplo
    - toda interface é publica, nem preciso colocar como public e abstract
    ex: objetoGeometrico: circulo polimorfismo, pois se torna um objeto do tipo objetoGeometrico


    # AULA 17/10/2022
    - COLEÇÕES:
        - forma generica para conseguir usar estrutura de dados: poder usar arvores, pilhas, etc
        - são conjuntos de diferentes interfaces para acessar as coleções: o metodo da lista é diferente do metodo de um conjunto, logo 
        para acessar os diferentes tipos de estruturas temos que ter diferentes metodos para acessar eles
        - interface: permite o acesso aos metodos para trabalhar com as estruturas desejadas
        Ex: List <T> Teste = new LinkedList<T>(); onde T é o tipo de informação que queremos colocar (classe)
            Tenho os metodos de acesso de uma lista usando a interface List
        - Polimorfismo: Pessoa Y é um tipo de pessoa X, enquanto Pessoa X não é um tipo de Pessoa Y


    # AULA 24/10/2022
    - PROGRAMAÇÃO VISUAL
        2 principais bibliotecas graficas estão na maquina virtual: java.awt (classes básicas) e javax.swing (mesmas implementações, mas com algumas melhorias)
        